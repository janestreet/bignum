open! Core
open Bignum

let number_literals =
  [ "-100.00000000"
  ; "100.00000000"
  ; "0.00000000"
  ; "-200.00000000"
  ; "200.00000000"
  ; "-300.00000000"
  ; "300.00000000"
  ; "-400.00000000"
  ; "-1000.00000000"
  ; "1000.00000000"
  ; "-1.00000000"
  ; "400.00000000"
  ; "-500.00000000"
  ; "1.00000000"
  ; "500.00000000"
  ; "-600.00000000"
  ; "-2000.00000000"
  ; "2.00000000"
  ; "-2.00000000"
  ; "600.00000000"
  ; "0.20720000"
  ; "-0.20227524"
  ; "0.18800000"
  ; "0.16550000"
  ; "0.15950000"
  ; "0.13000000"
  ; "0.12950000"
  ; "0.11950000"
  ; "-0.07232871"
  ; "0.05950000"
  ; "-0.05424653"
  ; "0.04600437"
  ; "0.04600000"
  ; "0.04050000"
  ; "-0.03616435"
  ; "0.03550391"
  ; "0.03550000"
  ; "0.02000000"
  ; "0.01950000"
  ; "0.01050000"
  ; "-316673.67291835"
  ; "3423.123456789"
  ; "-3423.1234567891"
  ]
;;

let scientific_literals =
  [ "8.24519553715492287e5"
  ; "-4.28570523991592777e37"
  ; "2.18204973736406361e86"
  ; "-2.60593290918158878e41"
  ; "-1.79980831979083856e-41"
  ; "3.38698564095146792e2"
  ; "-1.73780370352669731e-19"
  ; "-3.45013408656372044e80"
  ; "7.77199265223893632e-80"
  ; "4.79538294005178895e16"
  ; "1.99060465631274649e-76"
  ; "-6.83185520073336019e-39"
  ; "3.85194997042382733e10"
  ; "-1.83559331519703530e26"
  ; "2.68009403746226355e52"
  ; "-1.15702637735287027e50"
  ; "1.23026999154386972e-80"
  ; "-6.40677287378442009e36"
  ; "-1.78715017537117271e36"
  ; "-8.53370546551037981e-20"
  ; "-4.18890464251814377e35"
  ; "2.15140580926985290e50"
  ; "-3.15966058800821580e57"
  ; "-6.5351404796330480e-55"
  ; "-8.89655833226289008e54"
  ; "6.71358069394046099e60"
  ; "-2.11336369987876480e73"
  ; "1.75954441289825824e-67"
  ; "9.4964032650847118e11"
  ; "2.33544686974449128e-37"
  ; "-7.46423195727629164e85"
  ; "5.80271472928164262e6"
  ; "-7.3724793773695281e10"
  ; "-4.95886455013940102e29"
  ; "5.35364968642061596e-14"
  ; "2.32475308311864725e85"
  ; "1.53771199684946413e91"
  ; "7.12936505610979064e-70"
  ; "6.98555528473250708e14"
  ; "3.51244299794558383e71"
  ; "4.6462236999917593e-17"
  ; "7.71057505458522988e-15"
  ; "4.8489280022172023e-10"
  ]
;;

let fraction_literals =
  [ "44160789807965575/4829426549353870"
  ; "30939674654694147/6322829755914550"
  ; "-72428369358047507/5195095119360269"
  ; "-53737643075719198/6087445392550459"
  ; "-71929533019447655/1113041887496084"
  ; "5219047178260591/7163389730123283"
  ; "99042382321897552/3490424022614859"
  ; "-45751344425379902/1721437534821349"
  ; "-74746005231671836/7966364964691721"
  ; "-34739622790035318/496397132184469"
  ; "62228184750686697/5477651051019211"
  ; "-15194044929039901/5117411024806969"
  ; "-79361324855554022/9814827237061012"
  ; "-88391936350009406/8178593781327831"
  ; "95184845839450540/8166440588734285"
  ; "-48724667931563936/7089378564856185"
  ; "74585463996569066/5765737794233683"
  ; "-60054429901422974/6459232999238932"
  ; "60303663465038373/5449299391621362"
  ; "30796371699843189/1493195114700822"
  ; "95031587105217735/8173467417055182"
  ; "57725370314579029/2702654208651274"
  ; "85669045471174690/2610811638228058"
  ; "59952168764027711/1660319521308050"
  ; "92762599951257346/9032155865899525"
  ; "35435472284007576/4301647727457785"
  ; "64900617253170319/9606285049692550"
  ; "22425925701481557/7024328874214221"
  ; "34835377315112917/4729757958046577"
  ; "-29870928430533082/6082663646464600"
  ; "5055033876465838/1826158032470184"
  ; "54706809574838730/9090003651414655"
  ; "55207827381482296/445761198258308"
  ; "-25193794770638457/9635062653093763"
  ; "48752489871065991/1780115067648190"
  ; "-71196915255645433/3188067365661100"
  ; "9173803675692446/6902827425721030"
  ; "48949010983309632/9966256704200818"
  ; "90393195842509424/4310462036284360"
  ; "21139118103047194/4745871355142052"
  ; "-61616642439476948/6340173038108857"
  ; "86787735713527764/9756236291252226"
  ; "18115717877327883/4432870485149862"
  ]
;;

let numbers_decimal = List.map number_literals ~f:of_string
let numbers_scientific = List.map scientific_literals ~f:of_string
let numbers_fraction = List.map fraction_literals ~f:of_string

let sexps_decimal = List.map numbers_decimal ~f:sexp_of_t
let sexps_scientific = List.map numbers_scientific ~f:sexp_of_t
let sexps_fraction = List.map numbers_fraction ~f:sexp_of_t

let%bench_module "string" =
  (module struct
    let%bench "of_string (decimal)" = List.iter number_literals ~f:(fun b ->
      let (_ : Bignum.t) = Bignum.of_string b in
      ())
    ;;

    let%bench "of_string (scientific)" = List.iter scientific_literals ~f:(fun b ->
      let (_ : Bignum.t) = Bignum.of_string b in
      ())
    ;;

    let%bench "of_string (fraction)" = List.iter fraction_literals ~f:(fun b ->
      let (_ : Bignum.t) = Bignum.of_string b in
      ())
    ;;

    let%bench "to_string_hum (decimal)" = List.iter numbers_decimal ~f:(fun b ->
      let (_ : string) = to_string_hum b in
      ())
    ;;

    let%bench "to_string_hum (scientific)" = List.iter numbers_scientific ~f:(fun b ->
      let (_ : string) = to_string_hum b in
      ())
    ;;

    let%bench "to_string_hum (fraction)" = List.iter numbers_fraction ~f:(fun b ->
      let (_ : string) = to_string_hum b in
      ())
    ;;

    let%bench "to_string_accurate (decimal)" = List.iter numbers_decimal ~f:(fun b ->
      let (_ : string) = to_string_accurate b in
      ())
    ;;

    let%bench "to_string_accurate (scientific)" = List.iter numbers_scientific ~f:(fun b ->
      let (_ : string) = to_string_accurate b in
      ())
    ;;

    let%bench "to_string_accurate (fraction)" = List.iter numbers_fraction ~f:(fun b ->
      let (_ : string) = to_string_accurate b in
      ())
    ;;

    let%bench "to_string_decimal (decimal)" = List.iter numbers_decimal ~f:(fun b ->
      let (_ : string) = to_string_decimal_accurate_exn b in
      ())
    ;;

    let%bench "to_string_decimal (scientific)" = List.iter numbers_scientific ~f:(fun b ->
      let (_ : string) = to_string_decimal_accurate_exn b in
      ())
    ;;
  end)
;;

let%bench_module "sexp" =
  (module struct
    let%bench "of_sexp (decimal)" = List.iter sexps_decimal ~f:(fun s ->
      let (_ : Bignum.t) = t_of_sexp s in
      ())
    ;;

    let%bench "of_sexp (scientific)" = List.iter sexps_scientific ~f:(fun s ->
      let (_ : Bignum.t) = t_of_sexp s in
      ())
    ;;

    let%bench "of_sexp (fraction)" = List.iter sexps_fraction ~f:(fun s ->
      let (_ : Bignum.t) = t_of_sexp s in
      ())
    ;;

    let%bench "to_sexp (decimal)" = List.iter numbers_decimal ~f:(fun b ->
      let (_ : Sexp.t) = sexp_of_t b in
      ())
    ;;

    let%bench "to_sexp (scientific)" = List.iter numbers_scientific ~f:(fun b ->
      let (_ : Sexp.t) = sexp_of_t b in
      ())
    ;;

    let%bench "to_sexp (fraction)" = List.iter numbers_fraction ~f:(fun b ->
      let (_ : Sexp.t) = sexp_of_t b in
      ())
    ;;
  end)
;;

let%bench_module "Bignum binprot" =
  (module struct

    let buf = Bigstring.create 128

    let%bench "roundtrip compact" = List.iter numbers_decimal ~f:(fun b ->
      let (_ : int) =
        Stable.V2.bin_writer_t.Bin_prot.Type_class.write buf ~pos:0 b
      in
      let (_ : Stable.V2.t) =
        Stable.V2.bin_reader_t.Bin_prot.Type_class.read buf ~pos_ref:(ref 0)
      in
      ())
    ;;

    let%bench "roundtrip classic" = List.iter numbers_decimal ~f:(fun b ->
      let (_ : int) =
        Stable.V1.bin_writer_t.Bin_prot.Type_class.write buf ~pos:0 b
      in
      let (_ : Stable.V1.t) =
        Stable.V1.bin_reader_t.Bin_prot.Type_class.read buf ~pos_ref:(ref 0)
      in
      ())
    ;;
  end)

let%bench_module "round" = (module struct
  let%bench_fun "round_decimal" [@indexed digits = [0;3;6;9]] =
    fun () ->
      List.iter numbers_decimal ~f:(fun number -> ignore (round_decimal number ~digits : t))
  ;;

  let%bench "round" =
    List.iter numbers_decimal ~f:(fun number -> ignore (round number : t))
  ;;
end)

let%expect_test "Monitor value changes to understand how this may affect benches" =
  let as_sexp t = print_endline (Bignum.sexp_of_t t |> Sexp.to_string) in
  List.iter ~f:as_sexp numbers_decimal;
  [%expect {|
    -100
    100
    0
    -200
    200
    -300
    300
    -400
    -1000
    1000
    -1
    400
    -500
    1
    500
    -600
    -2000
    2
    -2
    600
    0.2072
    -0.20227524
    0.188
    0.1655
    0.1595
    0.13
    0.1295
    0.1195
    -0.07232871
    0.0595
    -0.05424653
    0.04600437
    0.046
    0.0405
    -0.03616435
    0.03550391
    0.0355
    0.02
    0.0195
    0.0105
    -316673.67291835
    3423.123456789
    -3423.1234567891 |}];
  List.iter ~f:as_sexp numbers_scientific;
  [%expect {|
    824519.553715492287
    -42857052399159277700000000000000000000
    218204973736406361000000000000000000000000000000000000000000000000000000000000000000000
    -260593290918158878000000000000000000000000
    -0.0000000000000000000000000000000000000000179980831979083856
    338.698564095146792
    -0.000000000000000000173780370352669731
    -345013408656372044000000000000000000000000000000000000000000000000000000000000000
    0.0000000000000000000000000000000000000000000000000000000000000000000000000000000777199265223893632
    47953829400517889.5
    0.000000000000000000000000000000000000000000000000000000000000000000000000000199060465631274649
    -0.00000000000000000000000000000000000000683185520073336019
    38519499704.2382733
    -183559331519703530000000000
    26800940374622635500000000000000000000000000000000000
    -115702637735287027000000000000000000000000000000000
    0.0000000000000000000000000000000000000000000000000000000000000000000000000000000123026999154386972
    -6406772873784420090000000000000000000
    -1787150175371172710000000000000000000
    -0.0000000000000000000853370546551037981
    -418890464251814377000000000000000000
    215140580926985290000000000000000000000000000000000
    -3159660588008215800000000000000000000000000000000000000000
    -0.0000000000000000000000000000000000000000000000000000006535140479633048
    -8896558332262890080000000000000000000000000000000000000
    6713580693940460990000000000000000000000000000000000000000000
    -21133636998787648000000000000000000000000000000000000000000000000000000000
    0.000000000000000000000000000000000000000000000000000000000000000000175954441289825824
    949640326508.47118
    0.000000000000000000000000000000000000233544686974449128
    -74642319572762916400000000000000000000000000000000000000000000000000000000000000000000
    5802714.72928164262
    -73724793773.695281
    -495886455013940102000000000000
    0.0000000000000535364968642061596
    23247530831186472500000000000000000000000000000000000000000000000000000000000000000000
    15377119968494641300000000000000000000000000000000000000000000000000000000000000000000000000
    0.000000000000000000000000000000000000000000000000000000000000000000000712936505610979064
    698555528473250.708
    351244299794558383000000000000000000000000000000000000000000000000000000
    0.000000000000000046462236999917593
    0.00000000000000771057505458522988
    0.00000000048489280022172023 |}];
  List.iter ~f:(fun t -> print_endline (Bignum.to_string_hum t)) numbers_fraction;
  [%expect {|
    9.144106315
    4.893327173
    -13.941683009
    -8.827618091
    -64.624282183
    0.728572279
    28.375458592
    -26.577406092
    -9.382699081
    -69.983528384
    11.360377682
    -2.969088247
    -8.0858606
    -10.807718138
    11.655609908
    -6.872911001
    12.935979168
    -9.297455272
    11.066314976
    20.624479277
    11.626838679
    21.358770253
    32.813185071
    36.108813993
    10.270261201
    8.237650902
    6.756057822
    3.192607593
    7.365150104
    -4.910830216
    2.768125095
    6.018348471
    123.850679685
    -2.614803419
    27.38726881
    -22.332312053
    1.328992181
    4.91147403
    20.970651193
    4.454212203
    -9.718448072
    8.895616416
    4.08667881 |}];
  List.iter ~f:as_sexp numbers_fraction;
  [%expect {|
    (9.144106315 + 3803863266219/96588530987077400000000)
    (4.893327172 + 30736758874237/31614148779572750000000)
    (-13.941683009 + -2323617733030579/5195095119360269000000000)
    (-8.827618091 + -466169501246231/6087445392550459000000000)
    (-64.624282183 + -100445819132157/278260471874021000000000)
    (0.728572278 + 2191432741925663/3581694865061641500000000)
    (28.375458591 + 3157972904196331/3490424022614859000000000)
    (-26.577406092 + -105379738935473/430359383705337250000000)
    (-9.38269908 + -162864822242083/199159124117293025000000)
    (-69.983528384 + -17831518679/131461104921734375000)
    (11.360377682 + 452104501175549/2738825525509605500000000)
    (-2.969088247 + -217303898406657/5117411024806969000000000)
    (-8.0858606 + -4494406591341/12268534046326265000000)
    (-10.807718137 + -4397194958429153/8178593781327831000000000)
    (11.655609908 + 664901249357/17753131714639750000000)
    (-6.872911001 + -44773386624751/109067362536249000000000)
    (12.935979168 + 69121005877633/180179306069802593750000)
    (-9.297455271 + -1507956672047357/1614808249809733000000000)
    (11.066314975 + 28536701130027/36328662610809080000000)
    (20.624479277 + 29741267689051/248865852450137000000000)
    (11.626838678 + 35430333637601/40066016750270500000000)
    (21.358770252 + 174449605862369/337831776081409250000000)
    (32.813185071 + 238362170538941/1305405819114029000000000)
    (36.108813993 + 3370669929127/33206390426161000000000)
    (10.270261201 + 12995817126819/361286234635981000000000)
    (8.237650902 + 182870322782793/430164772745778500000000)
    (6.756057822 + 28333078773739/96062850496925500000000)
    (3.192607593 + 645364375606649/2341442958071407000000000)
    (7.365150103 + 87597317017637/127831296163421000000000)
    (-4.910830216 + -1068739216029/3801664779040375000000)
    (2.768125094 + 73465928925169/114134877029386500000000)
    (6.01834847 + 141058554903443/181800073028293100000000)
    (123.850679684 + 27285825011583/27860074891144250000000)
    (-2.614803419 + -3049674580024303/9635062653093763000000000)
    (27.38726881 + 6536769600461/17801150676481900000000)
    (-22.332312052 + -7260396306057/7970168414152750000000)
    (1.328992181 + 11683884273357/690282742572103000000000)
    (4.91147403 + 215696124412173/498312835210040900000000)
    (20.970651192 + 10100195984509/13470193863388625000000)
    (4.454212202 + 481398817285187/593233919392756500000000)
    (-9.718448072 + -140193020278287/792521629763607125000000)
    (8.895616416 + 14007839572177/50813730683605343750000)
    (4.086678809 + 437398795887607/738811747524977000000000) |}];
;;
